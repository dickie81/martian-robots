{"version":3,"sources":["components/Grid/Grid.js","lib/directions.js","lib/instructions.js","components/Instructions/Instructions.js","components/Output/Output.js","lib/utils.js","lib/grid.js","App.js","reportWebVitals.js","index.js"],"names":["GridWrapper","styled","div","Row","Cell","Rover","Grid","data","robotPosition","reverse","map","row","index","x","y","scents","data-x","data-y","className","direction","join","directions","directionModifiers","N","E","S","W","getNewDirection","currentDirection","instruction","newDirectionIndex","indexOf","length","moveInDirection","coords","mods","parseInstructions","rawInstructions","Error","instructions","lines","split","line","trim","filter","gridDimensions","d","Number","some","isNaN","robots","slice","reduce","acc","robotIndex","Math","floor","includes","parts","coord","isValidDirection","Wrapper","InstructionsArea","textarea","SendButton","button","Instructions","onSubmit","useState","setInstructions","onChange","evt","target","value","data-testid","onClick","parsedInstructions","e","alert","message","OutputArea","Output","output","readOnly","wait","ms","Promise","resolve","setTimeout","replaceArrayIndex","arr","newVal","createGrid","width","height","Array","from","cell","addScent","grid","origRow","origCell","newRow","App","timeout","robotList","activeRobot","state","setState","useEffect","a","nextInstruction","remainingInstructions","newDirection","newCoordinates","nextMove","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mjCAEA,IAAMA,EAAcC,IAAOC,IAAV,KAIXC,EAAMF,IAAOC,IAAV,KAKHE,EAAOH,IAAOC,IAAV,KAqBJG,EAAQJ,IAAOC,IAAV,KAuCII,EAvBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,cAAT,OACX,cAACR,EAAD,UACG,YAAIO,GAAME,UAAUC,KAAI,SAACC,EAAKC,GAAN,OACvB,cAACT,EAAD,UACGQ,EAAID,KAAI,gBAAGG,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGC,EAAT,EAASA,OAAT,OACP,cAACX,EAAD,CAEEY,SAAQH,EACRI,SAAQH,EACRI,UAAWH,EACRL,KAAI,SAACS,GAAD,sBAAwBA,MAC5BC,KAAK,KANV,UAQgB,OAAbZ,QAAa,IAAbA,OAAA,EAAAA,EAAeK,KAAMA,IAAkB,OAAbL,QAAa,IAAbA,OAAA,EAAAA,EAAeM,KAAMA,EAC9C,cAACT,EAAD,CAAOa,UAAWV,EAAcW,UAAhC,oBACE,MAVN,cACcN,EADd,YACmBC,QAHvB,aAAgBF,UCnDTS,EAAa,CAAC,IAAK,IAAK,IAAK,KACpCC,EAAqB,CACzBC,EAAG,CAAEV,EAAG,EAAGC,EAAG,GACdU,EAAG,CAAEX,EAAG,EAAGC,EAAG,GACdW,EAAG,CAAEZ,EAAG,EAAGC,GAAI,GACfY,EAAG,CAAEb,GAAI,EAAGC,EAAG,IAKJa,EAAkB,SAACC,EAAkBC,GAChD,IAAMC,GACHT,EAAWU,QAAQH,GAClBP,EAAWW,QACM,MAAhBH,GAAuB,EAAI,IAC9BR,EAAWW,OAEb,OAAOX,EAAWS,IAGPG,EAAkB,SAACC,EAAQf,GACtC,IAAMgB,EAAOb,EAAmBH,GAChC,MAAO,CAAEe,EAAO,IAAMC,EAAKtB,EAAKqB,EAAO,IAAMC,EAAKrB,ICdvCsB,EAAoB,SAACC,GAChC,IAAKA,EACH,MAAM,IAAIC,MAAM,sBAGlB,IAAMC,EAAe,GACfC,EAA4BH,EAV/BI,MAAM,MACN/B,KAAI,SAACgC,GAAD,OAAUA,EAAKC,UACnBC,QAAO,SAACF,GAAD,QAAYA,KAUtB,GAAIF,EAAMR,OAAS,GAAKQ,EAAMR,OAAS,IAAM,EAC3C,MAAM,IAAIM,MAAM,wBAKlB,GAFAC,EAAaM,eAAiBL,EAAM,GAAGC,MAAM,KAAK/B,KAAI,SAACoC,GAAD,OAAOC,OAAOD,MAG3B,IAAvCP,EAAaM,eAAeb,QAC5BO,EAAaM,eAAeG,MAAK,SAACF,GAAD,OAAOG,MAAMH,MAE9C,MAAM,IAAIR,MAAM,2BAkDlB,OA/CAC,EAAaW,OAASV,EAAMW,MAAM,GAAGC,QAAO,SAACC,EAAKX,EAAM9B,GACtD,IAAM0C,EAAaC,KAAKC,MAAM5C,EAAQ,GAEtC,GAAIyC,EAAIC,GAAa,CAEnB,IAAMf,EAAeG,EAAKD,MAAM,IAGhC,GACEF,EAAaS,MACX,SAACnB,GAAD,OAAkB,CAAC,IAAK,IAAK,KAAK4B,SAAS5B,MAG7C,MAAM,IAAIS,MAAJ,yCAA4C1B,IAGpDyC,EAAIC,GAAJ,2BAAuBD,EAAIC,IAA3B,IAAwCf,qBACnC,CACL,IAAMmB,EAAQhB,EAAKD,MAAM,KACnBP,EAAS,CAACa,OAAOW,EAAM,IAAKX,OAAOW,EAAM,KACzCvC,EAAYuC,EAAM,GAExB,GACmB,IAAjBA,EAAM1B,QACNE,EAAOc,MAAK,SAACW,GAAD,OAAWV,MAAMU,QD7CL,SAACxC,GAAD,OAAeE,EAAWoC,SAAStC,GC8C1DyC,CAAiBzC,GAElB,MAAM,IAAImB,MAAJ,2CAA8C1B,IAGtD,GACEsB,EAAO,GAAK,GACZA,EAAO,GAAKK,EAAaM,eAAe,IACxCX,EAAO,GAAK,GACZA,EAAO,GAAKK,EAAaM,eAAe,GAExC,MAAM,IAAIP,MAAJ,mCACwB1B,EADxB,4BAKRyC,EAAIC,GAAc,CAAEpB,SAAQf,aAG9B,OAAOkC,IACN,IAEId,G,kcCvET,IAAMsB,EAAU5D,IAAOC,IAAV,KAMP4D,EAAmB7D,IAAO8D,SAAV,KAQhBC,EAAa/D,IAAOgE,OAAV,KAkCDC,EA5BM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACGC,mBAAS,IADZ,mBAC9B7B,EAD8B,KAChB8B,EADgB,KAiBrC,OACE,eAACR,EAAD,WACE,cAACC,EAAD,CACEQ,SAjB2B,SAACC,GAChCF,GAAgB,kBAAME,EAAIC,OAAOC,UAiB7BC,cAAY,iBAEd,cAACV,EAAD,CAAYW,QAhBc,WAC5B,IACE,IAAMC,EAAqBxC,EAAkBG,GAE7C4B,EAASS,GACT,MAAOC,GACPC,MAAMD,EAAEE,WAUR,mC,2TC9CN,IAAMlB,EAAU5D,IAAOC,IAAV,KAMP8E,EAAa/E,IAAO8D,SAAV,KAcDkB,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACb,cAAC,EAAD,UACE,cAACF,EAAD,CAAYG,UAAQ,EAACV,MAAOS,EAAQR,cAAY,cClBvCU,EAAO,SAACC,GAAD,OAClB,IAAIC,SAAQ,SAACC,GACXC,WAAWD,EAASF,OCFlBI,EAAoB,SAACC,EAAK9E,EAAO+E,GACrC,MAAM,GAAN,mBAAWD,EAAIvC,MAAM,EAAGvC,IAAxB,CAAgC+E,GAAhC,YAA2CD,EAAIvC,MAAMvC,EAAQ,MAGlDgF,EAAa,SAACC,EAAOC,GAAR,OACxBC,MAAMC,KAAK,CACThE,OAAQ8D,IACPpF,KAAI,SAACC,EAAKG,GAAN,OACLiF,MAAMC,KAAK,CAAEhE,OAAQ6D,IAASnF,KAAI,SAACuF,EAAMpF,GAAP,MAAc,CAC9CA,IACAC,IACAC,OAAQ,WAIDmF,EAAW,SAACC,EAAMjE,EAAQf,GACrC,IAAMiF,EAAUD,EAAKjE,EAAO,IACtBmE,EAAWD,EAAQlE,EAAO,IAE1BoE,EAASb,EAAkBW,EAASlE,EAAO,GAAjB,YAAC,eAC5BmE,GAD2B,IAE9BtF,OAAO,GAAD,mBAAMsF,EAAStF,QAAf,CAAuBI,OAG/B,OAAOsE,EAAkBU,EAAMjE,EAAO,GAAIoE,ICmH7BC,EAjIH,SAAC,GAAwC,IAAtClE,EAAqC,EAArCA,gBAAqC,IAApBmE,eAAoB,MAAV,IAAU,IACxBpC,mBAAS,CACjC7B,aAAc,KACdkE,UAAW,GACXC,YAAa,KACbxB,OAAQ,GACRiB,KAAM,KACNQ,MAAO,SAPyC,mBAC3CA,EAD2C,KACpCC,EADoC,KAuGlD,OAlFAC,qBAAU,WAAO,IACPH,EAAiCC,EAAjCD,YAAaD,EAAoBE,EAApBF,UAAWN,EAASQ,EAATR,KAE3BO,GAAgBD,EAAUzE,OAWjB,uCAAG,oCAAA8E,EAAA,sEACT1B,EAAKoB,GADI,iBAGVE,QAHU,IAGVA,OAHU,EAGVA,EAAanE,aAAaP,OAHhB,oBAITyE,EAAUzE,OAJD,uBAKX4E,EAAS,2BACJD,GADG,IAEND,YAAaD,EAAU,GACvBA,UAAWA,EAAUtD,MAAM,GAC3BwD,MAAO,gBATE,iCAcbC,EAAS,2BACJD,GADG,IAEND,YAAa,QAhBF,6BAsBTK,EAAkBL,EAAYnE,aAAa,GAC3CyE,EAAwBN,EAAYnE,aAAaY,MAAM,GACzD8D,EAAeP,EAAYvF,UAC3B+F,EAzBW,YAyBUR,EAAYxE,SAEjC,CAAC,IAAK,KAAKuB,SAASsD,GA3BT,iBA4BbE,EAAetF,EAAgB+E,EAAYvF,UAAW4F,GA5BzC,2BA6BgB,MAApBA,EA7BI,oBA8BbG,EAAiBjF,EAAgBiF,EAAgBR,EAAYvF,YACxCgF,EAAKO,EAAYxE,OAAO,IAAIwE,EAAYxE,OAAO,IAEnDnB,OAAO0C,SAASiD,EAAYvF,WAjChC,iBAkCX+F,EAAiBR,EAAYxE,OAlClB,qCAmCDiE,EAAKe,EAAe,WAnCnB,aAmCD,EAA0BA,EAAe,IAnCxC,wBAoCXN,EAAS,2BACJD,GADG,IAENzB,OAAO,GAAD,OAAKyB,EAAMzB,QAAX,OAAoBwB,EAAYxE,OAAOd,KAAK,KAA5C,YACJsF,EAAYvF,UADR,WAINgF,KAAMD,EAASC,EAAMO,EAAYxE,OAAQwE,EAAYvF,WACrDuF,YAAa,QA3CJ,2BAkDfE,EAAS,2BACJD,GADG,IAEND,YAAa,CACXvF,UAAW8F,EACX1E,aAAcyE,EACd9E,OAAQgF,GAEVhC,OACmC,IAAjC8B,EAAsBhF,OAAtB,UACO2E,EAAMzB,QADb,OACsBgC,EAAe9F,KAAK,KAD1C,YACkD6F,EADlD,MAGIN,EAAMzB,UA7DC,4CAAH,oDAiEdiC,GA3EsB,SAAhBR,EAAMA,OACRC,EAAS,2BACJD,GADG,IAENA,MAAO,YAyEZ,CAACA,EAAOH,IAGT,sBAAKtF,UAAU,MAAf,UACE,cAAC,EAAD,CACEiD,SAhG8B,SAAC5B,GACnCqE,EAAS,2BACJD,GADG,IAENzB,OAAQ,GACR3C,aAAcA,EACd4D,KAAMP,EAAU,WAAV,cAAcrD,EAAaM,eAAenC,KAAI,SAACoC,GAAD,OAAOA,EAAI,OAC/D2D,WAAuB,OAAZlE,QAAY,IAAZA,OAAA,EAAAA,EAAcW,QAASX,EAAaW,OAAS,GACxDwD,YAAa,SA0FXrE,gBAAiBA,IAElBsE,EAAMpE,cACL,cAAC,EAAD,CACEhC,KAAMoG,EAAMR,KACZ3F,cACEmG,EAAMD,YACF,CACE7F,EAAG8F,EAAMD,YAAYxE,OAAO,GAC5BpB,EAAG6F,EAAMD,YAAYxE,OAAO,GAC5Bf,UAAWwF,EAAMD,YAAYvF,WAE/B,OAIV,mBAAGiG,KAAK,MAAR,SAAeT,EAAMA,QACrB,cAAC,EAAD,CAAQzB,OAAQyB,EAAMzB,aC1HbmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.752fc60d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst GridWrapper = styled.div`\n  display: inline-block;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Cell = styled.div`\n  width: 20px;\n  height: 20px;\n  border: 2px solid black;\n  margin: 2px;\n  overflow: hidden;\n\n  &.scent-N {\n    border-top-color: red;\n  }\n  &.scent-E {\n    border-right-color: red;\n  }\n  &.scent-S {\n    border-bottom-color: red;\n  }\n  &.scent-W {\n    border-left-color: red;\n  }\n`;\n\nconst Rover = styled.div`\n  text-align: center;\n\n  &.E {\n    transform: rotate(90deg);\n  }\n\n  &.W {\n    transform: rotate(-90deg);\n  }\n\n  &.S {\n    transform: rotate(180deg);\n  }\n`;\n\nconst Grid = ({ data, robotPosition }) => (\n  <GridWrapper>\n    {[...data].reverse().map((row, index) => (\n      <Row key={`row${index}`}>\n        {row.map(({ x, y, scents }) => (\n          <Cell\n            key={`cell${x}x${y}`}\n            data-x={x}\n            data-y={y}\n            className={scents\n              .map((direction) => `scent-${direction}`)\n              .join(\" \")}\n          >\n            {robotPosition?.x === x && robotPosition?.y === y ? (\n              <Rover className={robotPosition.direction}>â¬†</Rover>\n            ) : null}\n          </Cell>\n        ))}\n      </Row>\n    ))}\n  </GridWrapper>\n);\n\nexport default Grid;\n","export const directions = [\"N\", \"E\", \"S\", \"W\"];\nconst directionModifiers = {\n  N: { x: 0, y: 1 },\n  E: { x: 1, y: 0 },\n  S: { x: 0, y: -1 },\n  W: { x: -1, y: 0 },\n};\n\nexport const isValidDirection = (direction) => directions.includes(direction);\n\nexport const getNewDirection = (currentDirection, instruction) => {\n  const newDirectionIndex =\n    (directions.indexOf(currentDirection) +\n      directions.length +\n      (instruction === \"L\" ? -1 : 1)) %\n    directions.length;\n\n  return directions[newDirectionIndex];\n};\n\nexport const moveInDirection = (coords, direction) => {\n  const mods = directionModifiers[direction];\n  return [(coords[0] += mods.x), (coords[1] += mods.y)];\n};\n","import { isValidDirection } from \"./directions\";\n\nconst getInstructionLines = (instructionsStr) =>\n  instructionsStr\n    .split(\"\\n\")\n    .map((line) => line.trim())\n    .filter((line) => !!line);\n\nexport const parseInstructions = (rawInstructions) => {\n  if (!rawInstructions) {\n    throw new Error(\"Empty instructions\");\n  }\n\n  const instructions = {};\n  const lines = getInstructionLines(rawInstructions);\n\n  if (lines.length < 3 || lines.length % 2 !== 1) {\n    throw new Error(\"Invalid instructions\");\n  }\n\n  instructions.gridDimensions = lines[0].split(\" \").map((d) => Number(d));\n\n  if (\n    instructions.gridDimensions.length !== 2 ||\n    instructions.gridDimensions.some((d) => isNaN(d))\n  ) {\n    throw new Error(\"Invalid grid dimensions\");\n  }\n\n  instructions.robots = lines.slice(1).reduce((acc, line, index) => {\n    const robotIndex = Math.floor(index / 2);\n\n    if (acc[robotIndex]) {\n      // add directions\n      const instructions = line.split(\"\");\n\n      // validate robot instructions\n      if (\n        instructions.some(\n          (instruction) => ![\"L\", \"R\", \"F\"].includes(instruction)\n        )\n      ) {\n        throw new Error(`Invalid instructions for robot ${index}`);\n      }\n\n      acc[robotIndex] = { ...acc[robotIndex], instructions };\n    } else {\n      const parts = line.split(\" \");\n      const coords = [Number(parts[0]), Number(parts[1])];\n      const direction = parts[2];\n\n      if (\n        parts.length !== 3 ||\n        coords.some((coord) => isNaN(coord)) ||\n        !isValidDirection(direction)\n      ) {\n        throw new Error(`Invalid start position for robot ${index}`);\n      }\n\n      if (\n        coords[0] < 0 ||\n        coords[0] > instructions.gridDimensions[0] ||\n        coords[1] < 0 ||\n        coords[1] > instructions.gridDimensions[1]\n      ) {\n        throw new Error(\n          `Start position for robot ${index} is outside of the grid`\n        );\n      }\n\n      acc[robotIndex] = { coords, direction };\n    }\n\n    return acc;\n  }, []);\n\n  return instructions;\n};\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { parseInstructions } from \"../../lib/instructions\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\n\nconst InstructionsArea = styled.textarea`\n  width: 300px;\n  height: 300px;\n  border: 1px solid black;\n  appearance: none;\n  box-sizing: border-box;\n`;\n\nconst SendButton = styled.button`\n  padding: 0;\n  border: 1px solid black;\n  appearance: none;\n`;\n\nconst Instructions = ({ onSubmit }) => {\n  const [instructions, setInstructions] = useState(\"\");\n\n  const handleInstructionsChange = (evt) => {\n    setInstructions(() => evt.target.value);\n  };\n\n  const handleSendButtonClick = () => {\n    try {\n      const parsedInstructions = parseInstructions(instructions);\n\n      onSubmit(parsedInstructions);\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <InstructionsArea\n        onChange={handleInstructionsChange}\n        data-testid=\"instructions\"\n      />\n      <SendButton onClick={handleSendButtonClick}>SEND INSTRUCTIONS</SendButton>\n    </Wrapper>\n  );\n};\n\nexport default Instructions;\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\n\nconst OutputArea = styled.textarea`\n  width: 300px;\n  height: 300px;\n  border: 1px solid black;\n  appearance: none;\n  box-sizing: border-box;\n`;\n\nconst Output = ({ output }) => (\n  <Wrapper>\n    <OutputArea readOnly value={output} data-testid=\"output\" />\n  </Wrapper>\n);\n\nexport default Output;\n","export const wait = (ms) =>\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n","const replaceArrayIndex = (arr, index, newVal) => {\n  return [...arr.slice(0, index), newVal, ...arr.slice(index + 1)];\n};\n\nexport const createGrid = (width, height) =>\n  Array.from({\n    length: height,\n  }).map((row, y) =>\n    Array.from({ length: width }).map((cell, x) => ({\n      x,\n      y,\n      scents: [],\n    }))\n  );\n\nexport const addScent = (grid, coords, direction) => {\n  const origRow = grid[coords[1]];\n  const origCell = origRow[coords[0]];\n\n  const newRow = replaceArrayIndex(origRow, coords[0], {\n    ...origCell,\n    scents: [...origCell.scents, direction],\n  });\n\n  return replaceArrayIndex(grid, coords[1], newRow);\n};\n","import { useState, useEffect } from \"react\";\n\nimport Grid from \"./components/Grid\";\nimport Instructions from \"./components/Instructions\";\nimport Output from \"./components/Output\";\n\nimport { wait } from \"./lib/utils\";\nimport { getNewDirection, moveInDirection } from \"./lib/directions\";\nimport { createGrid, addScent } from \"./lib/grid\";\n\nconst App = ({ rawInstructions, timeout = 100 }) => {\n  const [state, setState] = useState({\n    instructions: null,\n    robotList: [],\n    activeRobot: null,\n    output: \"\",\n    grid: null,\n    state: \"idle\",\n  });\n\n  const handleInstructionsSubmitted = (instructions) => {\n    setState({\n      ...state,\n      output: \"\",\n      instructions: instructions,\n      grid: createGrid(...instructions.gridDimensions.map((d) => d + 1)),\n      robotList: instructions?.robots ? instructions.robots : [],\n      activeRobot: null,\n    });\n  };\n\n  useEffect(() => {\n    const { activeRobot, robotList, grid } = state;\n\n    if (!activeRobot && !robotList.length) {\n      if (state.state !== \"idle\") {\n        setState({\n          ...state,\n          state: \"idle\",\n        });\n      }\n\n      return;\n    }\n\n    const nextMove = async () => {\n      await wait(timeout);\n\n      if (!activeRobot?.instructions.length) {\n        if (robotList.length) {\n          setState({\n            ...state,\n            activeRobot: robotList[0],\n            robotList: robotList.slice(1),\n            state: \"processing\",\n          });\n          return;\n        }\n\n        setState({\n          ...state,\n          activeRobot: null,\n        });\n\n        return;\n      }\n\n      const nextInstruction = activeRobot.instructions[0];\n      const remainingInstructions = activeRobot.instructions.slice(1);\n      let newDirection = activeRobot.direction;\n      let newCoordinates = [...activeRobot.coords];\n\n      if ([\"L\", \"R\"].includes(nextInstruction)) {\n        newDirection = getNewDirection(activeRobot.direction, nextInstruction);\n      } else if (nextInstruction === \"F\") {\n        newCoordinates = moveInDirection(newCoordinates, activeRobot.direction);\n        const origLocation = grid[activeRobot.coords[1]][activeRobot.coords[0]];\n\n        if (origLocation.scents.includes(activeRobot.direction)) {\n          newCoordinates = activeRobot.coords;\n        } else if (!grid[newCoordinates[1]]?.[newCoordinates[0]]) {\n          setState({\n            ...state,\n            output: `${state.output}${activeRobot.coords.join(\" \")} ${\n              activeRobot.direction\n            } LOST\n`,\n            grid: addScent(grid, activeRobot.coords, activeRobot.direction),\n            activeRobot: null,\n          });\n\n          return;\n        }\n      }\n\n      setState({\n        ...state,\n        activeRobot: {\n          direction: newDirection,\n          instructions: remainingInstructions,\n          coords: newCoordinates,\n        },\n        output:\n          remainingInstructions.length === 0\n            ? `${state.output}${newCoordinates.join(\" \")} ${newDirection}\n`\n            : state.output,\n      });\n    };\n\n    nextMove();\n  }, [state, timeout]);\n\n  return (\n    <div className=\"App\">\n      <Instructions\n        onSubmit={handleInstructionsSubmitted}\n        rawInstructions={rawInstructions}\n      />\n      {state.instructions && (\n        <Grid\n          data={state.grid}\n          robotPosition={\n            state.activeRobot\n              ? {\n                  x: state.activeRobot.coords[0],\n                  y: state.activeRobot.coords[1],\n                  direction: state.activeRobot.direction,\n                }\n              : null\n          }\n        />\n      )}\n      <p role=\"log\">{state.state}</p>\n      <Output output={state.output} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}